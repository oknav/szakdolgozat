# -*- coding: utf-8 -*-
"""autoencoder_0131.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1YpmfBa9Or8L5QMEo4QGXY289tcseyxQL
"""

from data.json_handler import *
from data.image import Images
from network.build import BuildModel, modelUse
import copy
from config import *


def autoencoder(train, test):
    # Load json and images, partition them
    json_path = os.path.join(PATH, "models.json")
    js = Models(json_path)
    js.open()

    imgs = Images(NPY_PATH)
    part_imgs = imgs.partData(100)

    # Add partitions to models, build and train them
    filters = [16, 32, 64, 128, 256, 512, 1024]

    for i, model in enumerate(js.models):
        name = model["name"] + ".h5"
        if not find(name, MODELS_PATH):
            js.reset(i)
            path_ = os.path.join(MODELS_PATH, name)
            print(model['name'])
            BuildModel(model['name'], imgs.inp_shape, model['deep'], filters, path_)
        else:
            pass

    if train == 'True' or test == 'True':
        img_group = 1
        for i, model in enumerate(js.models):
            name = model["name"]
            if train == 'True':
                train_model = TRAIN[0]
                train_imgs = TRAIN[1]
                print(name)
                js.reset(i)
                if train_model in name:
                    model['images'] = int(train_imgs)
                    modelUse(model, part_imgs, train, False)
                elif train_model == "all":
                    if train_imgs == "all":
                        if len(part_imgs[img_group]) < 100 or img_group >= len(part_imgs):
                            img_group = 1
                        model['images'] = img_group
                        img_group += 1
                    else:
                        model['images'] = int(train_imgs)
                    modelUse(model, part_imgs, train, False)

            if test == 'True':
                test_model = TEST[0]
                test_imgs = TEST[1]
                model_ = copy.deepcopy(model)
                if test_model in name:
                    if test_imgs == "all":
                        for index in range(1, len(js.models)+1):
                            model_['images'] = int(index)
                            modelUse(model_, part_imgs, False, test)
                            model["test"][str(index)] = model_["test"][str(index)]
                    else:
                        model_['images'] = int(test_imgs)
                        modelUse(model_, part_imgs, False, test)
                        model["test"][str(test_imgs)] = model_["test"][str(test_imgs)]
                elif test_model == "all":
                    if test_imgs == "all":
                        for index in range(1, len(part_imgs.keys())+1):
                            model_['images'] = int(index)
                            modelUse(model_, part_imgs, False, test)
                            model["test"][str(index)] = model_["test"][str(index)]
                    else:
                        model_['images'] = int(test_imgs)
                        modelUse(model_, part_imgs, False, test)
                        model["test"][str(test_imgs)] = model_["test"][str(test_imgs)]
    else:
        pass

    js.save()
